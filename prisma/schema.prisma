generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  image        String?
  emailVerified DateTime?
  accounts     Account[]
  sessions     Session[]
  watchlists   Watchlist[]
  favorites    Favorite[]
  histories    History[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Watchlist {
  id        String          @id @default(cuid())
  name      String
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WatchlistItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model WatchlistItem {
  id          String    @id @default(cuid())
  symbol      String
  watchlistId String
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  note        String?
  createdAt   DateTime  @default(now())

  @@unique([watchlistId, symbol])
}

model Favorite {
  id        String   @id @default(cuid())
  symbol    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, symbol])
}

model History {
  id        String   @id @default(cuid())
  symbol    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewedAt  DateTime @default(now())

  @@index([userId, viewedAt])
}

model StockData {
  id           String   @id @default(cuid())
  symbol       String   @unique
  name         String
  exchange     String
  price        Decimal?
  change       Decimal?
  changePct    Decimal?
  marketCap    Decimal?
  pe           Decimal?
  range52wLow  Decimal?
  range52wHigh Decimal?
  lastUpdated  DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([symbol])
}
